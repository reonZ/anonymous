{
  "version": 3,
  "sources": ["../src/module.js", "../src/token.js", "../src/api.js", "../src/actor.js", "../src/apps/names.js", "../src/third/dnd5e.js", "../src/third/pf2e.js", "../src/third/wire.js", "../src/third.js", "../src/chat.js", "../src/tracker.js", "../src/main.js"],
  "sourcesContent": ["export const MODULE_ID = 'anonymous'\r\n\r\nexport function templatePath(...path) {\r\n    path = path.filter(x => typeof x === 'string')\r\n    return `modules/${MODULE_ID}/templates/${path.join('/')}`\r\n}\r\n\r\nexport function isGM() {\r\n    const data = game.data\r\n    const user = data.users.find(x => x._id === data.userId)\r\n    return !!user && user.role >= CONST.USER_ROLES.GAMEMASTER\r\n}\r\n\r\nexport function getFlag(doc, key, fallback) {\r\n    return doc.getFlag(MODULE_ID, key) ?? fallback\r\n}\r\n\r\nexport function setFlag(doc, key, value) {\r\n    return doc.setFlag(MODULE_ID, key, value)\r\n}\r\n\r\nexport function localize(...args) {\r\n    let [key, data] = args\r\n    key = `${MODULE_ID}.${key}`\r\n    if (data) return game.i18n.format(key, data)\r\n    return game.i18n.localize(key)\r\n}\r\n\r\nexport function subLocalize(subKey) {\r\n    const fn = (...args) => localize(`${subKey}.${args[0]}`, args[1])\r\n\r\n    Object.defineProperties(fn, {\r\n        warn: {\r\n            value: (...args) => warn(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        info: {\r\n            value: (...args) => info(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        error: {\r\n            value: (...args) => error(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        has: {\r\n            value: key => hasLocalization(`${subKey}.${key}`),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        path: {\r\n            value: key => localizePath(`${subKey}.${key}`),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        template: {\r\n            value: (key, { hash }) => fn(key, hash),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n    })\r\n\r\n    return fn\r\n}\r\n\r\nexport function getSameCombatants(combatant) {\r\n    return combatant.combat.turns.filter(x => x.actorId === combatant.actorId)\r\n}\r\n\r\nexport function getSetting(key) {\r\n    return game.settings.get(MODULE_ID, key)\r\n}\r\n\r\nexport function setSetting(key, value) {\r\n    return game.settings.set(MODULE_ID, key, value)\r\n}\r\n\r\nexport function getActorSceneTokens(scene, actor, linkedOnly = false) {\r\n    return scene.tokens.filter(token => token.actorId === actor.id && (!linkedOnly || token.actorLink))\r\n}\r\n\r\nexport function getActorTokens(actor, linkedOnly = false) {\r\n    return game.scenes.map(scene => getActorSceneTokens(scene, actor, linkedOnly)).flat()\r\n}\r\n\r\nexport function capitalize(str) {\r\n    if (!str) return ''\r\n    return str[0].toUpperCase() + str.slice(1)\r\n}\r\n\r\nexport function registerSetting(options) {\r\n    const name = options.name\r\n    options.scope = options.scope ?? 'world'\r\n    options.config = options.config ?? false\r\n    if (options.config) {\r\n        options.name = getSettingLocalizationPath(name, 'name')\r\n        options.hint = getSettingLocalizationPath(name, 'hint')\r\n    }\r\n    if (Array.isArray(options.choices)) {\r\n        options.choices = options.choices.reduce((choices, choice) => {\r\n            choices[choice] = getSettingLocalizationPath(name, 'choices', choice)\r\n            return choices\r\n        }, {})\r\n    }\r\n    game.settings.register(MODULE_ID, name, options)\r\n}\r\n\r\nexport function registerSettingMenu(options) {\r\n    const name = options.name\r\n    options.name = getSettingLocalizationPath('menus', name, 'name')\r\n    options.label = getSettingLocalizationPath('menus', name, 'label')\r\n    options.hint = getSettingLocalizationPath('menus', name, 'hint')\r\n    options.restricted = options.restricted ?? true\r\n    options.icon = options.icon ?? 'fas fa-cogs'\r\n    game.settings.registerMenu(MODULE_ID, name, options)\r\n}\r\n\r\nexport function getSettingLocalizationPath(...path) {\r\n    return `${MODULE_ID}.settings.${path.join('.')}`\r\n}\r\n\r\nexport function getCurrentModule() {\r\n    return game.modules.get(MODULE_ID)\r\n}\r\n\r\nfunction notify(str, arg1, arg2, arg3) {\r\n    const type = typeof arg1 === 'string' ? arg1 : 'info'\r\n    const data = typeof arg1 === 'object' ? arg1 : typeof arg2 === 'object' ? arg2 : undefined\r\n    const permanent = typeof arg1 === 'boolean' ? arg1 : typeof arg2 === 'boolean' ? arg2 : arg3 ?? false\r\n\r\n    ui.notifications.notify(localize(str, data), type, { permanent })\r\n}\r\n\r\nexport function warn(...args) {\r\n    const [str, arg1, arg2] = args\r\n    notify(str, 'warning', arg1, arg2)\r\n}\r\n\r\nexport function info(...args) {\r\n    const [str, arg1, arg2] = args\r\n    notify(str, 'info', arg1, arg2)\r\n}\r\n\r\nexport function error(...args) {\r\n    const [str, arg1, arg2] = args\r\n    notify(str, 'error', arg1, arg2)\r\n}\r\n\r\nexport function replaceHTMLText(html, regexp, replacement, addSelf = false) {\r\n    let nodes = html.find('*')\r\n    if (addSelf) nodes = nodes.addBack()\r\n    nodes.contents().each((_, el) => {\r\n        if (el.nodeType === Node.TEXT_NODE && el.textContent?.trim()) {\r\n            $(el).replaceWith(el.textContent.replace(regexp, replacement))\r\n        }\r\n    })\r\n}\r\n", "import { playersSeeName, toggleSeeName } from './api'\r\nimport { getActorTokens, getSetting, localize } from './module'\r\n\r\nexport function updateActorTokens(actor, showName) {\r\n    if (actor.token) changeDisplayName(actor.token, showName)\r\n    else getActorTokens(actor, true).forEach(x => changeDisplayName(x, showName))\r\n}\r\n\r\nexport function renderTokenHUD(hud, html) {\r\n    const actor = hud.object.actor\r\n    if (!actor || actor.hasPlayerOwner) return\r\n\r\n    const toggle = createToggle(actor)\r\n    toggle.addEventListener('click', () => toggleSeeName(actor))\r\n    html.find('.col.right').append(toggle)\r\n}\r\n\r\nexport function preCreateToken(token) {\r\n    const actor = token.actor\r\n    if (!actor || actor?.hasPlayerOwner) return\r\n\r\n    const displayName = token.displayName\r\n    const seeName = playersSeeName(token.actor)\r\n    const shows = isShowing(displayName)\r\n\r\n    let swap = displayName\r\n    if (seeName && !shows && getSetting('token')) {\r\n        swap = swapToShow(displayName)\r\n    } else if (!seeName && shows) {\r\n        swap = swapToHide(displayName)\r\n    }\r\n\r\n    if (swap !== displayName) {\r\n        token.updateSource({ displayName: swap })\r\n    }\r\n}\r\n\r\nfunction createToggle(actor) {\r\n    const tmp = document.createElement('template')\r\n    const toggled = playersSeeName(actor)\r\n\r\n    tmp.innerHTML = `<div class=\"control-icon${toggled ? ' active' : ''}\" data-action=\"anonymous-toggle\">\r\n    <i class=\"fa-solid fa-signature\" title=\"${localize('hud.title')}\"></i>\r\n</div>`\r\n\r\n    return tmp.content.firstChild\r\n}\r\n\r\nfunction changeDisplayName(token, showName) {\r\n    if (showName) showTokenName(token)\r\n    else hideTokenName(token)\r\n}\r\n\r\nfunction showTokenName(token) {\r\n    const displayName = token.displayName\r\n    if (isShowing(displayName) || !getSetting('token')) return\r\n\r\n    let swap = swapToShow(displayName)\r\n    if (swap !== displayName) {\r\n        token.update({ displayName: swap })\r\n    }\r\n}\r\n\r\nfunction hideTokenName(token) {\r\n    const displayName = token.displayName\r\n    if (isHidding(displayName)) return\r\n    const swap = swapToHide(displayName)\r\n    token.update({ displayName: swap })\r\n}\r\n\r\nfunction isHidding(displayName) {\r\n    return !isShowing(displayName)\r\n}\r\n\r\nfunction isShowing(displayName) {\r\n    return displayName === CONST.TOKEN_DISPLAY_MODES.HOVER || displayName === CONST.TOKEN_DISPLAY_MODES.ALWAYS\r\n}\r\n\r\nfunction swapToHide(displayName) {\r\n    if (displayName === CONST.TOKEN_DISPLAY_MODES.HOVER) return CONST.TOKEN_DISPLAY_MODES.OWNER_HOVER\r\n    if (displayName === CONST.TOKEN_DISPLAY_MODES.ALWAYS) return CONST.TOKEN_DISPLAY_MODES.OWNER\r\n    return displayName\r\n}\r\n\r\nfunction swapToShow(displayName) {\r\n    if (displayName === CONST.TOKEN_DISPLAY_MODES.OWNER_HOVER) return CONST.TOKEN_DISPLAY_MODES.HOVER\r\n    if (displayName === CONST.TOKEN_DISPLAY_MODES.OWNER) return CONST.TOKEN_DISPLAY_MODES.ALWAYS\r\n    return displayName\r\n}\r\n", "import { capitalize, getFlag, getSetting, localize, setFlag } from './module'\r\nimport { updateActorTokens } from './token'\r\n\r\nexport function playersSeeName(doc) {\r\n    if (doc instanceof Combatant && doc.actor) doc = doc.actor\r\n    if (doc instanceof Actor && doc.hasPlayerOwner) return true\r\n    return !!getFlag(doc, 'showName')\r\n}\r\n\r\nexport async function toggleSeeName(doc) {\r\n    const showName = !playersSeeName(doc)\r\n\r\n    if (doc instanceof Actor || !doc.actor) await setFlag(doc, 'showName', showName)\r\n    else await setFlag(doc.actor, 'showName', showName)\r\n\r\n    if (canvas.tokens.hud?.rendered) canvas.tokens.hud.render()\r\n\r\n    const actor = doc instanceof Actor ? doc : doc.actor\r\n    if (actor) updateActorTokens(actor, showName)\r\n\r\n    return showName\r\n}\r\n\r\nexport function getName(doc) {\r\n    const unknown = localize('unknown')\r\n    const type = doc instanceof Actor ? doc.type : doc.actor?.type\r\n    if (!type) return unknown\r\n\r\n    const saved = (getSavedNames()[type] ?? '').trim()\r\n    return saved || formatUnknown(unknown, type)\r\n}\r\n\r\nexport function refresh() {\r\n    ui.combat.render()\r\n}\r\n\r\nexport function getSavedNames() {\r\n    return getSetting('names')\r\n}\r\n\r\nexport function formatUnknown(unknown, type) {\r\n    return `${unknown} ${capitalize(type)}`\r\n}\r\n", "import { playersSeeName, refresh, toggleSeeName } from \"./api\";\r\nimport { MODULE_ID, localize } from \"./module\";\r\nimport { updateActorTokens } from \"./token\";\r\n\r\nexport function getActorDirectoryEntryContext(html, entries) {\r\n    addSelectContextEntry({\r\n        entries,\r\n        defaultData: {\r\n            name: (choice) => localize(`context.${choice}`),\r\n            icon: \"fa-solid fa-signature\",\r\n            callback: ($li) => {\r\n                const id = $li.attr(\"data-document-id\");\r\n                const actor = game.actors.get(id);\r\n                if (actor) toggleSeeName(actor);\r\n            },\r\n            condition: ($li, choice) => {\r\n                const id = $li.attr(\"data-document-id\");\r\n                const actor = game.actors.get(id);\r\n                return (\r\n                    !!actor &&\r\n                    !actor.hasPlayerOwner &&\r\n                    (choice === \"show\" ? !playersSeeName(actor) : playersSeeName(actor))\r\n                );\r\n            },\r\n        },\r\n        choices: [\"show\", \"hide\"],\r\n    });\r\n}\r\n\r\nexport function onActorUpdate(actor, data) {\r\n    let needsRefresh =\r\n        foundry.utils.getProperty(data, `flags.${MODULE_ID}.showName}`) !== undefined;\r\n\r\n    if (\"ownership\" in data) {\r\n        updateActorTokens(actor, actor.hasPlayerOwner);\r\n        needsRefresh = true;\r\n    }\r\n\r\n    if (needsRefresh) refresh();\r\n}\r\n\r\nfunction addSelectContextEntry({ entries, choices, defaultData = {} }) {\r\n    if (Array.isArray(choices)) {\r\n        choices = choices.reduce((acc, curr) => {\r\n            acc[curr] = {};\r\n            return acc;\r\n        }, {});\r\n    }\r\n\r\n    for (const key in choices) {\r\n        const choice = choices[key];\r\n        const name =\r\n            choice.name ??\r\n            (typeof defaultData.name === \"function\" ? defaultData.name(key) : defaultData.name) ??\r\n            \"\";\r\n\r\n        let icon =\r\n            choice.icon ??\r\n            (typeof defaultData.icon === \"function\" ? defaultData.icon(key) : defaultData.icon) ??\r\n            \"\";\r\n        if (!$(icon).length) {\r\n            const $icon = $(\"<i></i>\");\r\n            $icon.addClass(icon);\r\n            icon = $icon[0].outerHTML;\r\n        }\r\n\r\n        entries.unshift({\r\n            name,\r\n            icon,\r\n            callback: ($li) => {\r\n                if (choice.callback) choice.callback($li);\r\n                else if (defaultData.callback) defaultData.callback($li, key);\r\n            },\r\n            condition: ($li) =>\r\n                choice.condition?.($li) ?? defaultData.condition?.($li, key) ?? true,\r\n        });\r\n    }\r\n}\r\n", "import { formatUnknown, getSavedNames } from \"../api\";\r\nimport { localize, setSetting, subLocalize, templatePath } from \"../module\";\r\n\r\nexport class AnonymousNamesMenu extends FormApplication {\r\n    static get defaultOptions() {\r\n        return foundry.utils.mergeObject(super.defaultOptions, {\r\n            id: \"anonymous-names-menu\",\r\n            title: localize(\"templates.names.title\"),\r\n            template: templatePath(\"names.html\"),\r\n            width: 400,\r\n        });\r\n    }\r\n\r\n    getData(options) {\r\n        const unknown = localize(\"unknown\");\r\n        const saved = getSavedNames();\r\n        const types = Object.keys(game.system.documentTypes.Actor).map((x) => ({\r\n            type: x,\r\n            value: (saved[x] ?? \"\").trim(),\r\n            placeholder: formatUnknown(unknown, x),\r\n        }));\r\n        return {\r\n            ...super.getData(options),\r\n            types,\r\n            i18n: subLocalize(\"templates.names\"),\r\n        };\r\n    }\r\n\r\n    activateListeners(html) {\r\n        super.activateListeners(html);\r\n        html.find(\"[data-action=cancel]\").on(\"click\", () => this.close());\r\n    }\r\n\r\n    async _updateObject(event, formData) {\r\n        setSetting(\"names\", formData);\r\n    }\r\n}\r\n", "import { getSetting, replaceHTMLText } from \"../module\";\r\n\r\nexport function dnd5ParseChat({ message, $html, isAnonymous, actor }) {\r\n    if (!isAnonymous) return;\r\n\r\n    if (message.rolls.length && getSetting(\"criticals\")) {\r\n        const critical = game.i18n.localize(\"DND5E.CriticalHit\");\r\n        const powerful = game.i18n.localize(\"DND5E.PowerfulCritical\");\r\n        const regexp = new RegExp(\r\n            ` (\\\\(([\\\\w ]*)?(?:${critical}|${powerful})([\\\\w ]*)?\\\\))$`,\r\n            \"igm\"\r\n        );\r\n        const $flavor = $html.find(\"header .flavor-text\");\r\n        if (game.user.isGM)\r\n            replaceHTMLText($flavor, regexp, ' <span class=\"anonymous-replaced\">$1</span>', true);\r\n        replaceHTMLText($flavor, regexp, \"\", true);\r\n    }\r\n}\r\n\r\nexport function isDnD3() {\r\n    return (\r\n        game.system.id === \"dnd5e\" && foundry.utils.isNewerVersion(game.system.version, \"2.999.0\")\r\n    );\r\n}\r\n", "import { getName, playersSeeName } from \"../api\";\r\nimport {\r\n    getCurrentModule,\r\n    getSetting,\r\n    getSettingLocalizationPath,\r\n    localize,\r\n    registerSetting,\r\n    replaceHTMLText,\r\n    warn,\r\n} from \"../module\";\r\n\r\nexport function pf2eInitHook(isGM) {\r\n    registerSetting({\r\n        name: \"pf2e.traits\",\r\n        type: String,\r\n        default: \"never\",\r\n        config: true,\r\n        choices: {\r\n            never: getSettingLocalizationPath(\"pf2e.traits.choices.never\"),\r\n            rolls: getSettingLocalizationPath(\"pf2e.traits.choices.rolls\"),\r\n            always: getSettingLocalizationPath(\"pf2e.traits.choices.always\"),\r\n        },\r\n    });\r\n}\r\n\r\nexport function pf2eReadyHook(isGM) {\r\n    if (isGM) disableSettings();\r\n}\r\n\r\nfunction disableSettings() {\r\n    let key = \"\";\r\n    if (game.settings.settings.has(\"pf2e.metagame.tokenSetsNameVisibility\"))\r\n        key = \"metagame.tokenSetsNameVisibility\";\r\n    else if (game.settings.settings.has(\"pf2e.metagame_tokenSetsNameVisibility\"))\r\n        key = \"metagame_tokenSetsNameVisibility\";\r\n    if (!key || !game.settings.get(\"pf2e\", key)) return;\r\n\r\n    const module = getCurrentModule().title;\r\n    const setting = game.i18n.localize(\"PF2E.SETTINGS.Metagame.TokenSetsNameVisibility.Name\");\r\n\r\n    game.settings.set(\"pf2e\", key, false);\r\n    warn(\"pf2e.disabled\", { module, setting }, true);\r\n}\r\n\r\nexport function pf2eParseChat({ message, isAnonymous, $html }) {\r\n    const isGM = game.user.isGM;\r\n    const target = message.target?.actor;\r\n    const criticals = getSetting(\"criticals\");\r\n    const rolls = getSetting(\"rolls\");\r\n\r\n    if (target && !target.hasPlayerOwner && !playersSeeName(target)) {\r\n        const $targets = $html.find('.flavor-text .target-dc [data-whose=\"target\"]');\r\n        if ($targets.length) {\r\n            const $target = $targets.first();\r\n            if (isGM) $target.attr(\"data-visibility\", \"gm\");\r\n            else $target.text(localize(\"pf2e.target\", { name: getName(target) }));\r\n        }\r\n    }\r\n\r\n    if (!isGM && isAnonymous) {\r\n        const traits = getSetting(\"pf2e.traits\");\r\n\r\n        if (message.rolls.length) {\r\n            if (rolls) {\r\n                const $tags = $html.find(\".flavor-text hr + .tags\");\r\n\r\n                if ($tags.length) {\r\n                    $tags.prev(\"hr\").remove();\r\n                    $tags.remove();\r\n                }\r\n\r\n                if (criticals) {\r\n                    $html\r\n                        .find(\".message-content .dice-roll .dice-result .dice-total\")\r\n                        .css(\"color\", \"var(--color-text-dark-primary)\");\r\n                }\r\n\r\n                if (traits !== \"never\") {\r\n                    $html.find(\".flavor-text .tags\").remove();\r\n                }\r\n            } else if (traits === \"always\") {\r\n                $html.find(\".flavor-text .tags\").first().remove();\r\n            }\r\n        } else if (traits === \"always\") {\r\n            $html.find(\".message-content section.tags\").remove();\r\n        }\r\n    }\r\n\r\n    if (isAnonymous && message.rolls.length && rolls && criticals) {\r\n        const critical = game.i18n.localize(\"PF2E.Check.Result.Degree.Attack.criticalSuccess\");\r\n        const hit = game.i18n.localize(\"PF2E.Check.Result.Degree.Attack.success\");\r\n        const regex = new RegExp(`(\\\\((${critical}|${hit})\\\\))`, \"gmi\");\r\n        const str = isGM ? '<span class=\"anonymous-replaced\">$1</span>' : \"\";\r\n        const flavor = $html.find(\"header .flavor-text\");\r\n        replaceHTMLText(flavor, regex, str, true);\r\n    }\r\n}\r\n", "import { getName, playersSeeName } from '../api'\r\nimport { getSetting } from '../module'\r\n\r\nconst SAVE = /\\(dc \\d+\\)/gim\r\n\r\nexport function wireParseChat({ message, isAnonymous, $html }) {\r\n    if (game.user.isGM) return\r\n\r\n    if (isAnonymous) {\r\n        if (getSetting('rolls')) {\r\n            const $tooltips = $html.find('.dice-tooltip')\r\n            $tooltips.empty()\r\n            $tooltips.css('padding-top', 0)\r\n\r\n            if (getSetting('criticals')) {\r\n                $html.find('.dice-total').removeClass('critical fumble')\r\n            }\r\n\r\n            const $save = $html.find('.phase-saving-throws .phase-heading')\r\n            $save.text($save.text().replace(SAVE, ''))\r\n        }\r\n    }\r\n\r\n    // target\r\n\r\n    const $target = $html.find('.phase-attack .token-info .token-name')\r\n    const targetUUID = message.getFlag('wire', 'activation.attack.targetActorUuid')\r\n    if ($target.length && targetUUID) {\r\n        try {\r\n            const target = fromUuidSync(targetUUID)?.actor\r\n            if (target && !target.hasPlayerOwner && !playersSeeName(target)) {\r\n                $target.text(getName(target))\r\n            }\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    const $targets = $html.find('.phase-saving-throws .saving-throw-target:has(.target-name)')\r\n    const targetsUUID = message.getFlag('wire', 'activation.targetUuids')\r\n    if ($targets.length && targetsUUID?.length) {\r\n        try {\r\n            for (const uuid of targetsUUID) {\r\n                const target = fromUuidSync(uuid)?.actor\r\n                if (target && !target.hasPlayerOwner && !playersSeeName(target)) {\r\n                    $targets.filter(`[data-actor-id=\"${uuid}\"]`).find('.target-name').text(getName(target))\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n}\r\n", "import { dnd5ParseChat } from './third/dnd5e'\r\nimport { pf2eInitHook, pf2eParseChat, pf2eReadyHook } from './third/pf2e'\r\nimport { wireParseChat } from './third/wire'\r\n\r\nexport const thirdPartyInitHooks = createThirdPartyListener()\r\nexport const thirdPartyReadyHooks = createThirdPartyListener()\r\nexport const thirdPartyChatParse = createThirdPartyListener()\r\n\r\nexport function thirdPartyInitialization() {\r\n    switch (game.system.id) {\r\n        case 'pf2e':\r\n            thirdPartyInitHooks.add(pf2eInitHook)\r\n            thirdPartyReadyHooks.add(pf2eReadyHook)\r\n            thirdPartyChatParse.add(pf2eParseChat)\r\n            break\r\n        case 'dnd5e':\r\n            thirdPartyChatParse.add(dnd5ParseChat)\r\n            break\r\n    }\r\n\r\n    if (game.modules.get('wire')?.active) {\r\n        thirdPartyChatParse.add(wireParseChat)\r\n    }\r\n}\r\n\r\nfunction createThirdPartyListener() {\r\n    const a = []\r\n    const f = function (...args) {\r\n        a.forEach(x => x(...args))\r\n    }\r\n    f.add = fn => a.push(fn)\r\n    return f\r\n}\r\n", "import { getName, playersSeeName } from \"./api\";\r\nimport { getSetting, replaceHTMLText } from \"./module\";\r\nimport { thirdPartyChatParse } from \"./third\";\r\n\r\nexport function renderChatMessage(message, html) {\r\n    if (message.blind) return;\r\n\r\n    html = html instanceof HTMLElement ? $(html) : html;\r\n\r\n    const isGM = game.user.isGM;\r\n    const speaker = message.speaker;\r\n    const actor = ChatMessage.getSpeakerActor(speaker);\r\n    const playersCanSee = !actor || playersSeeName(actor);\r\n    const isAnonymous = !!actor && !actor.hasPlayerOwner;\r\n\r\n    if (actor && !playersCanSee) changeNames(message, actor, html);\r\n\r\n    if (!isGM && isAnonymous) {\r\n        if (message.rolls.length && getSetting(\"rolls\")) {\r\n            const $result = html.find(\".message-content .dice-roll .dice-result\");\r\n            $result.find(\".dice-formula, .dice-tooltip\").remove();\r\n            if (getSetting(\"criticals\")) $result.find(\".dice-total\").removeClass(\"critical fumble\");\r\n        }\r\n        if (getSetting(\"footer\")) html.find(\".message-content footer.card-footer\").remove();\r\n        if (getSetting(\"cardContent\")) html.find(\".message-content .card-content\").remove();\r\n    }\r\n\r\n    thirdPartyChatParse({ message, actor, $html: html, playersCanSee, isAnonymous });\r\n}\r\n\r\nfunction changeNames(message, actor, html) {\r\n    const speaker = message.speaker;\r\n    const names = new Set();\r\n\r\n    if (speaker.alias) names.add(speaker.alias);\r\n    if (actor.name) names.add(actor.name);\r\n\r\n    if (speaker.token && speaker.scene) {\r\n        const scene = game.scenes.get(speaker.scene);\r\n        const token = scene?.tokens.get(speaker.token);\r\n        if (token?.name) names.add(token.name);\r\n    }\r\n\r\n    if (!names.size) return;\r\n\r\n    const escaped = Array.from(names).map((x) => RegExp.escape(x));\r\n    const joined = escaped.join(\"|\");\r\n    const regexp = new RegExp(`(^|\\\\P{L})(${joined})(?=\\\\P{L}|$)`, \"gmu\");\r\n    const renamed = getName(actor);\r\n    const replacement = game.user.isGM\r\n    ? `$1 <span class=\"anonymous-replaced\" title=\"${renamed}\">$2</span>`\r\n    : ` ${renamed}`;\r\n\r\n    replaceHTMLText(html, regexp, replacement);\r\n}\r\n", "import { getName, playersSeeName, toggleSeeName } from './api'\r\nimport { getSameCombatants, localize } from './module'\r\n\r\nexport function renderCombatTracker(tracker, html) {\r\n    const combatants = ui.combat.viewed?.combatants\r\n    if (!combatants || !combatants.size) return\r\n\r\n    html.find('#combat-tracker .combatant').each(function () {\r\n        const id = this.dataset.combatantId\r\n        const combatant = combatants.get(id)\r\n        if (!combatant || !combatant.actor || combatant.actor.hasPlayerOwner) return\r\n\r\n        const showName = playersSeeName(combatant)\r\n\r\n        if (game.user.isGM) {\r\n            const controls = this.querySelector('.combatant-controls')\r\n            const hidden = controls.querySelector('.combatant-control[data-control=\"toggleHidden\"]')\r\n            const toggle = createToggle(showName)\r\n\r\n            toggle.addEventListener('click', event => toggleCombatantName(event, combatant))\r\n\r\n            if (hidden) hidden.after(toggle)\r\n            else controls.appendChild(toggle)\r\n        } else if (!showName) {\r\n            const h4 = this.querySelector('h4')\r\n            h4.textContent = getName(combatant)\r\n        }\r\n    })\r\n}\r\n\r\nfunction toggleCombatantName(event, combatant) {\r\n    event.preventDefault()\r\n    event.stopPropagation()\r\n\r\n    if (event.shiftKey && combatant.actor && combatant.actor.isToken && game.combat?.scene) {\r\n        getSameCombatants(combatant).forEach(toggleSeeName)\r\n    } else {\r\n        toggleSeeName(combatant)\r\n    }\r\n}\r\n\r\nfunction createToggle(active) {\r\n    const tmp = document.createElement('template')\r\n    const tooltip = active ? 'context.hide' : 'context.show'\r\n\r\n    tmp.innerHTML = `<a\r\n    class=\"combatant-control${active ? ' active' : ''}\"\r\n    data-control=\"toggle-name-visibility\"\r\n    data-tooltip=\"${localize(tooltip)}\"\r\n>\r\n    <i class=\"fa-solid fa-signature\"></i>\r\n</a>`\r\n\r\n    return tmp.content.firstChild\r\n}\r\n", "import { getActorDirectoryEntryContext, onActorUpdate } from \"./actor\";\r\nimport { getName, playersSeeName, refresh, toggleSeeName } from \"./api\";\r\nimport { AnonymousNamesMenu } from \"./apps/names\";\r\nimport { renderChatMessage } from \"./chat\";\r\nimport { getCurrentModule, isGM, registerSetting, registerSettingMenu } from \"./module\";\r\nimport { thirdPartyInitHooks, thirdPartyInitialization, thirdPartyReadyHooks } from \"./third\";\r\nimport { isDnD3 } from \"./third/dnd5e\";\r\nimport { preCreateToken, renderTokenHUD } from \"./token\";\r\nimport { renderCombatTracker } from \"./tracker\";\r\n\r\nHooks.once(\"init\", () => {\r\n    registerSetting({\r\n        name: \"version\",\r\n        type: String,\r\n        default: \"\",\r\n    });\r\n\r\n    registerSetting({\r\n        name: \"names\",\r\n        type: Object,\r\n        default: {},\r\n        onChange: refresh,\r\n    });\r\n\r\n    registerSetting({\r\n        name: \"token\",\r\n        type: Boolean,\r\n        default: true,\r\n        config: true,\r\n    });\r\n\r\n    registerSetting({\r\n        name: \"rolls\",\r\n        type: Boolean,\r\n        default: true,\r\n        config: true,\r\n    });\r\n\r\n    registerSetting({\r\n        name: \"criticals\",\r\n        type: Boolean,\r\n        default: true,\r\n        config: true,\r\n    });\r\n\r\n    registerSetting({\r\n        name: \"cardContent\",\r\n        type: Boolean,\r\n        default: false,\r\n        config: true,\r\n    });\r\n\r\n    registerSetting({\r\n        name: \"footer\",\r\n        type: Boolean,\r\n        default: false,\r\n        config: true,\r\n    });\r\n\r\n    registerSettingMenu({\r\n        name: \"namesMenu\",\r\n        type: AnonymousNamesMenu,\r\n    });\r\n\r\n    getCurrentModule().api = {\r\n        playersSeeName,\r\n        toggleSeeName,\r\n        getName,\r\n    };\r\n\r\n    const gm = isGM();\r\n\r\n    if (gm) {\r\n        Hooks.on(\"getActorDirectoryEntryContext\", getActorDirectoryEntryContext);\r\n        Hooks.on(\"renderTokenHUD\", renderTokenHUD);\r\n    }\r\n\r\n    thirdPartyInitialization();\r\n    thirdPartyInitHooks(gm);\r\n\r\n    Hooks.on(\"renderCombatTracker\", renderCombatTracker);\r\n    Hooks.on(isDnD3() ? \"dnd5e.renderChatMessage\" : \"renderChatMessage\", renderChatMessage);\r\n    Hooks.on(\"preCreateToken\", preCreateToken);\r\n    Hooks.on(\"updateActor\", onActorUpdate);\r\n});\r\n\r\nHooks.once(\"ready\", () => {\r\n    thirdPartyReadyHooks(game.user.isGM);\r\n});\r\n"],
  "mappings": "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",
  "names": ["MODULE_ID", "templatePath", "path", "x", "__name", "isGM", "data", "user", "getFlag", "doc", "key", "fallback", "setFlag", "value", "localize", "args", "subLocalize", "subKey", "fn", "warn", "info", "error", "hash", "getSameCombatants", "combatant", "getSetting", "setSetting", "getActorSceneTokens", "scene", "actor", "linkedOnly", "token", "getActorTokens", "capitalize", "str", "registerSetting", "options", "name", "getSettingLocalizationPath", "choices", "choice", "registerSettingMenu", "getCurrentModule", "notify", "arg1", "arg2", "arg3", "type", "permanent", "replaceHTMLText", "html", "regexp", "replacement", "addSelf", "nodes", "_", "el", "updateActorTokens", "actor", "showName", "changeDisplayName", "getActorTokens", "x", "__name", "renderTokenHUD", "hud", "html", "toggle", "createToggle", "toggleSeeName", "preCreateToken", "token", "displayName", "seeName", "playersSeeName", "shows", "isShowing", "swap", "getSetting", "swapToShow", "swapToHide", "tmp", "toggled", "localize", "showTokenName", "hideTokenName", "isHidding", "playersSeeName", "doc", "getFlag", "__name", "toggleSeeName", "showName", "setFlag", "actor", "updateActorTokens", "getName", "unknown", "localize", "type", "getSavedNames", "formatUnknown", "refresh", "getSetting", "capitalize", "getActorDirectoryEntryContext", "html", "entries", "addSelectContextEntry", "choice", "localize", "$li", "id", "actor", "toggleSeeName", "playersSeeName", "__name", "onActorUpdate", "data", "needsRefresh", "MODULE_ID", "updateActorTokens", "refresh", "choices", "defaultData", "acc", "curr", "key", "name", "icon", "$icon", "AnonymousNamesMenu", "localize", "templatePath", "options", "unknown", "saved", "getSavedNames", "types", "x", "formatUnknown", "subLocalize", "html", "event", "formData", "setSetting", "__name", "dnd5ParseChat", "message", "$html", "isAnonymous", "actor", "getSetting", "critical", "powerful", "regexp", "$flavor", "replaceHTMLText", "__name", "isDnD3", "pf2eInitHook", "isGM", "registerSetting", "getSettingLocalizationPath", "__name", "pf2eReadyHook", "disableSettings", "key", "module", "getCurrentModule", "setting", "warn", "pf2eParseChat", "message", "isAnonymous", "$html", "target", "criticals", "getSetting", "rolls", "playersSeeName", "$targets", "$target", "localize", "getName", "traits", "$tags", "critical", "hit", "regex", "str", "flavor", "replaceHTMLText", "SAVE", "wireParseChat", "message", "isAnonymous", "$html", "getSetting", "$tooltips", "$save", "$target", "targetUUID", "target", "playersSeeName", "getName", "error", "$targets", "targetsUUID", "uuid", "__name", "thirdPartyInitHooks", "createThirdPartyListener", "thirdPartyReadyHooks", "thirdPartyChatParse", "thirdPartyInitialization", "pf2eInitHook", "pf2eReadyHook", "pf2eParseChat", "dnd5ParseChat", "wireParseChat", "__name", "a", "f", "args", "x", "fn", "renderChatMessage", "message", "html", "isGM", "speaker", "actor", "playersCanSee", "playersSeeName", "isAnonymous", "changeNames", "getSetting", "$result", "thirdPartyChatParse", "__name", "names", "token", "joined", "x", "regexp", "renamed", "getName", "replacement", "replaceHTMLText", "renderCombatTracker", "tracker", "html", "combatants", "id", "combatant", "showName", "playersSeeName", "controls", "hidden", "toggle", "createToggle", "event", "toggleCombatantName", "h4", "getName", "__name", "getSameCombatants", "toggleSeeName", "active", "tmp", "tooltip", "localize", "registerSetting", "refresh", "registerSettingMenu", "AnonymousNamesMenu", "getCurrentModule", "playersSeeName", "toggleSeeName", "getName", "gm", "isGM", "getActorDirectoryEntryContext", "renderTokenHUD", "thirdPartyInitialization", "thirdPartyInitHooks", "renderCombatTracker", "isDnD3", "renderChatMessage", "preCreateToken", "onActorUpdate", "thirdPartyReadyHooks"]
}
